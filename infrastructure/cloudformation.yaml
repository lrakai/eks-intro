AWSTemplateFormatVersion: "2010-09-09"
Description: "Amazon VPC and EKS Cluster using EKSCTL"

Parameters:
  EKSClusterName:
    Type: String
    Default: Cluster-1
    Description: The EKS Cluster Name.
    ConstraintDescription: Must be a valid EKS Cluster Name (non-empty)

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 01 within the VPC

  Subnet02Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for subnet 02 within the VPC

  Subnet03Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 03 within the VPC

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Default: "{KeyName}"
    Type: AWS::EC2::KeyPair::KeyName

  EKSSSHLabInstanceType:
    Description: EC2 instance type for the SSH Lab Mgmt instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type

  EKSSSHLabImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-061e7ebbc234015fe
    Description: AMI id for the SSH Lab Mgmt instance

  EC2EKSLaunchInstanceType:
    Description: EC2 instance type for the EKS Lanunch instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type

  EC2EKSLaunchImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-061e7ebbc234015fe
    Description: AMI id for the EKS Lanunch instance

  EC2EKSWorkerNodeInstanceType:
    Description: EC2 instance type for the EKS Worker Node instance
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: Must be a valid EC2 instance type

  EC2EKSWorkerNodeCount:
    Description: EC2 instance count for the Worker Nodes
    Type: Number
    Default: 1
    ConstraintDescription: Must be a value between 1-3 for cost control purposes

  EBSVolumeSizeForK8sPVs:
    Description: EBS Volume size in GB for persistent volumes
    Type: Number
    Default: 10
    ConstraintDescription: Must be a value 5-20 for cost control purposes

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet02"

  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet03"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  EC2EKSLaunchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  EC2LabSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  #EC2EKSLaunchSecurityGroupFromSSH22Ingress:
  #  Type: AWS::EC2::SecurityGroupIngress
  #  DependsOn: EC2EKSLaunchSecurityGroup
  #  Properties:
  #    Description: Allow inbound SSH
  #    GroupId: !Ref EC2EKSLaunchSecurityGroup
  #    CidrIp: "0.0.0.0/0"
  #    IpProtocol: tcp
  #    FromPort: 22
  #    ToPort: 22

  EC2LabSecurityGroupFromSSH22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EC2LabSecurityGroup
    Properties:
      Description: Allow inbound SSH
      GroupId: !Ref EC2LabSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  EKSLaunchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "EKSLaunchPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "eks:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "cloudformation:ListStacks"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DescribeStackEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "ec2:CreateInternetGateway"
                  - "ec2:AllocateAddress"
                  - "ec2:CreateVpc"
                  - "ec2:ModifyVpcAttribute"
                  - "ec2:CreateTags"
                  - "ec2:CreateSubnet"
                  - "ec2:AttachInternetGateway"
                  - "ec2:CreateRouteTable"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:CreateRoute"
                  - "ec2:CreateNatGateway"
                  - "ec2:AssociateRouteTable"
                  - "ec2:RevokeSecurityGroupEgress"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:AuthorizeSecurityGroupEgress"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:GetRole"
                  - "iam:PassRole"
                  - "iam:CreateServiceLinkedRole"
                  - "iam:CreateInstanceProfile"
                  - "iam:AddRoleToInstanceProfile"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "autoscaling:CreateLaunchConfiguration"
                  - "autoscaling:CreateAutoScalingGroup"
                  - "autoscaling:UpdateAutoScalingGroup"
                  - "autoscaling:Describe*"
                Resource: "*"

  EKSLaunchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EKSLaunchInstanceRole

  EKSSSHInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "EKSAssumePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "eks:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "ec2:Describe*"
                Resource: "*"
              - Effect: "Deny"
                Action: "eks:CreateCluster"
                Resource: "*"

  EKSSSHInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EKSSSHInstanceRole

  EC2EKSLaunchInstance:
    DependsOn: EKSSSHInstanceRole
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: EKSLaunchInstanceProfile
      InstanceType:
        Ref: EC2EKSLaunchInstanceType
      #KeyName:
      #  Ref: KeyName
      ImageId:
        Ref: EC2EKSLaunchImageId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: EC2EKSLaunchSecurityGroup
          SubnetId:
            Ref: Subnet01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          EKS_SSH_INSTANCE_ROLE=${EKSSSHInstanceRole.Arn}
          echo EKS_SSH_INSTANCE_ROLE=$EKS_SSH_INSTANCE_ROLE

          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          mv /tmp/eksctl /usr/local/bin
          eksctl

          curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          cp ./kubectl /usr/local/bin
          export PATH=/usr/local/bin:$PATH
          kubectl version --short --client

          curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          cp ./aws-iam-authenticator /usr/local/bin
          export PATH=/usr/local/bin:$PATH
          aws-iam-authenticator help

          eksctl create cluster --name=${EKSClusterName} --nodes=${EC2EKSWorkerNodeCount} --node-type=${EC2EKSWorkerNodeInstanceType} --ssh-public-key=${KeyName} --region=us-west-2 --zones=us-west-2a,us-west-2b,us-west-2c -v 5

          kubectl get nodes

          ROLE="    - rolearn: $EKS_SSH_INSTANCE_ROLE\n      username: ec2:admin\n      groups:\n        - system:masters"
          kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml
          kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"

          kubectl get -n kube-system configmap/aws-auth -o yaml

          echo finished!!
      Tags:
        - Key: Name
          Value: eks.launch.instance

  EKSSSHLabInstance:
    DependsOn: EC2EKSLaunchInstance
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: EKSSSHInstanceProfile
      InstanceType:
        Ref: EKSSSHLabInstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: EKSSSHLabImageId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: EC2LabSecurityGroup
          SubnetId:
            Ref: Subnet01
      Tags:
        - Key: Name
          Value: eks.ssh.instance

  EBSMySQLVolume2A:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.mysql.volume
        - Key: Zone
          Value: us-west-2a
      VolumeType: gp2

  EBSWordpressVolume2A:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.web.volume
        - Key: Zone
          Value: us-west-2a
      VolumeType: gp2

  EBSMySQLVolume2B:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2b
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.mysql.volume
        - Key: Zone
          Value: us-west-2b
      VolumeType: gp2

  EBSWordpressVolume2B:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2b
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.web.volume
        - Key: Zone
          Value: us-west-2b
      VolumeType: gp2

  EBSMySQLVolume2C:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2c
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.mysql.volume
        - Key: Zone
          Value: us-west-2c
      VolumeType: gp2

  EBSWordpressVolume2C:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-west-2c
      Encrypted: false
      Size:
        Ref: EBSVolumeSizeForK8sPVs
      Tags:
        - Key: Name
          Value: wordpress.web.volume
        - Key: Zone
          Value: us-west-2c
      VolumeType: gp2

  Group:

  User:

Outputs:
  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [",", [!Ref Subnet01, !Ref Subnet02, !Ref Subnet03]]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
